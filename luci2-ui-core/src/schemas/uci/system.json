{
  "type": "object",
  "title": "Basic System configurations",
  "description": "Settings that apply to the most basic operation of the system, such as the hostname, the time zone, and how and where to write logging information to",
  "properties": {
    "@system": {
      "title": "",
      "description": "General System options",
      "type": "array",
      "items": {
        "type": "object",
        "anonymous": true,
        "ui": {
          "include": [
            ["hostname", "timezone", "zonename"],
            ["conloglevel", "buffersize"],
            ["log_buffer_size"],
            ["log_file", "log_size"],
            [
              "log_remote",
              "log_ip",
              "log_port",
              "log_proto",
              "log_hostname",
              "log_trailer_null",
              "log_prefix"
            ]
          ],

          "titles": [
            "General",
            "Kernel Log",
            "System Log",
            "File Logging",
            "Remote Logging",
            "Other"
          ]
        },
        "properties": {
          "hostname": {
            "title": "Hostname for this system",
            "description": "",
            "type": "string",
            "format": "hostname",
            "default": "OpenWrt",
            "required": true
          },
          "timezone": {
            "type": "string",
            "title": "Time Zone Info",
            "description": "The time zone that date and time should be rendered in by default.",
            "default": "UTC"
          },
          "zonename": {
            "title": "Time Zone Name",
            "description": "The time zone that date and time should be rendered in by default.",
            "type": "string",
            "ui": {
              "widget": "set-autocomplete",
              "events": {
                "onValueChange": "uci.configs.system['@system'][0].timezone = $value[1]"
              }
            },
            "default": "UTC",
            "enum=": "load('views/system/tz.json')",
            "propKey": "0"
          },
          "buffersize": {
            "title": "Kernel log Buffersize",
            "description": "Size of the kernel message buffer",
            "type": "integer"
          },
          "conloglevel": {
            "title": "Kernel log level",
            "description": "Maximum log level for kernel messages to be logged to the console.",
            "type": "integer",
            "minimum": 1,
            "maximum": 8,
            "default": 7,
            "ui": { "widget": "set-slider" }
          },
          "cronloglevel": {
            "title": "Cron log level",
            "description": "Combination of bit flags. 1: log start of job, 2: log end of job, 4: log failed jobs, 8: log pid of all jobs.",
            "type": "integer",
            "default": 5,
            "minimum": 0,
            "maximum": 15
          },
          "log_buffer_size": {
            "title": "Buffersize",
            "description": "System log in memory buffer size [kB]",
            "type": "integer",
            "minimum": 0,
            "default": 64
          },
          "log_file": {
            "title": "Log file",
            "description": "File to write log messages to",
            "type": "string",
            "format": "path"
          },
          "log_ip": {
            "title": "Remote Syslog Server IP",

            "type": "string",
            "format": "ipv4",
            "depends=": "_.log_remote",
            "required=": "!!_.log_remote"
          },
          "log_port": {
            "title": "Remote Port",
            "description": "Port number of the remote Syslog Server",
            "type": "integer",
            "default": 514,
            "minimum": 1,
            "maximum": 65535,
            "depends=": "_.log_remote"
          },
          "log_prefix": {
            "title": "Log prefix (remote)",
            "description": "Adds a prefix to all log messages send over network",
            "type": "string",
            "depends=": "_.log_remote"
          },
          "log_proto": {
            "title": "Protocol",
            "description": "Sets the protocol to use for the connection",
            "type": "string",
            "enum": ["tcp", "udp"],
            "default": "udp",
            "depends=": "_.log_remote"
          },
          "log_remote": {
            "title": "Enable remote logging",
            "description": "Log messages to server in addition to the local destination.",
            "type": "boolean",
            "default": true
          },
          "log_size": {
            "title": "Log size",
            "description": "Size of the file buffer in [kB]",
            "type": "integer",
            "default": 16,
            "minimum": 0
          },
          "log_trailer_null": {
            "title": "Trailer null",
            "description": "Use \\0 instead of \\n as trailer when using TCP.",
            "type": "boolean",
            "default": false,
            "depends=": "_.log_proto=='tcp'"
          },
          "log_hostname": {
            "title": "Hostname for log",
            "type": "string",
            "format": "host",
            "depends=": "_.log_remote"
          }
        }
      }
    },
    "@timeserver": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "enabled": {
            "title": "Use NTP",
            "description": "Enable use of time server",
            "type": "boolean",
            "default": true
          },
          "enable_server": {
            "title": "Enable Local Server",
            "description": "Provide local NTP server",
            "type": "boolean",
            "default": false
          },
          "server": {
            "title": "Servers",
            "description": "NTP servers to poll the time from. If empty disables client.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "hostname"
            }
          },
          "use_dhcp": {
            "title": "Use DHCP",
            "description": "Get NTP servers from DHCP.",
            "type": "boolean",
            "default": false,
            "depends=": "_.enabled"
          },
          "dhcp_interface": {
            "title": "Use DHCP Interface",
            "description": "Get NTP servers from DHCP.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "depends=": "_.use_dhcp"
          }
        }
      }
    },
    "@led": {
      "type": "array",
      "ui": {
        "events": { "onInit": "leds = ubus('luci2.system','led_list').leds" }
      },

      "items": {
        "type": "object",
        "ui": {
          "options": {
            "title=": "`${_.name || ''} (${_.sysfs || ''})`"
          }
        },
        "properties": {
          "name": {
            "title": "Led name",
            "description": "",
            "type": "string"
          },
          "sysfs": {
            "title": "Sysfs entry",
            "description": "Entry of the led in the /sys/class/leds directory",
            "type": "string",
            "format": "path",
            "enum=": "jsonPath(leds, '$[*].name')",
            "required": true
          },
          "default": {
            "title": "Default state",
            "description": "LED state before trigger",
            "type": "boolean"
          },
          "trigger": {
            "title": "Trigger",
            "description": "Event that controls the led activation",
            "type": "string",
            "enum=": "jsonPath(leds, `$[?(@.name=='${_.sysfs}')].triggers[*]`)",
            "default": "none"
          },
          "delayon": {
            "title": "Delay ON",
            "description": "How long (ms) the LED should be on",
            "type": "integer",
            "required": true,
            "minimum": 0,
            "depends=": "_.trigger === 'timer'"
          },
          "delayoff": {
            "title": "Delay OFF",
            "description": "How long (ms) the LED should be off",
            "type": "integer",
            "required": true,
            "minimum": 0,
            "depends=": "_.trigger === 'timer'"
          },
          "dev": {
            "title": "Device",
            "description": "Name of the network/usb device which status should be reflected",
            "type": "string",
            "required": true,
            "depends=": "['netdev', 'usbdev', 'morse'].indexOf(_.trigger)>=0",
            "enum=": "ubus('luci2.network', 'device_list', '$.devices[*].device')"
          },
          "mode": {
            "title": "Mode",
            "description": "One or more of link, tx, or rx, seperated by spaces",
            "type": "string",
            "required": true,
            "enum": ["link", "tx", "rx"],
            "depends=": "_.trigger === 'netdev'",
            "default": "link"
          },
          "interval": {
            "title": "Interval",
            "description": "Interval in ms when device is active",
            "type": "integer",
            "required": true,
            "minimum": 0,
            "depends=": "_.trigger === 'usbdev'",
            "default": 50
          },
          "delay": {
            "title": "Delay",
            "description": "Dit length in milliseconds",
            "type": "integer",
            "minimum": 0,
            "depends=": "_.trigger === 'morse'",
            "default": 150
          },
          "message": {
            "title": "Message",
            "description": "The message to signal",
            "type": "string",
            "depends=": "_.trigger === 'morse'"
          },
          "gpio": {
            "title": "GPIO",
            "type": "integer",
            "default": 0,
            "depends=": "_.trigger === 'gpio'"
          },
          "inverted": {
            "title": "Inverted",
            "type": "boolean",
            "depends=": "_.trigger === 'gpio'"
          }
        }
      }
    }
  }
}
